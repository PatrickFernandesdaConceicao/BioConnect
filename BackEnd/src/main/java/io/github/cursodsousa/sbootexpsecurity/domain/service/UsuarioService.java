package io.github.cursodsousa.sbootexpsecurity.domain.service;

import io.github.cursodsousa.sbootexpsecurity.api.dto.RegistrarUsuarioDTO;
import io.github.cursodsousa.sbootexpsecurity.api.dto.UsuarioResponseDTO;
import io.github.cursodsousa.sbootexpsecurity.config.exception.SenhaInvalidaException;
import io.github.cursodsousa.sbootexpsecurity.domain.entity.Grupo;
import io.github.cursodsousa.sbootexpsecurity.domain.entity.Usuario;
import io.github.cursodsousa.sbootexpsecurity.domain.entity.UsuarioGrupo;
import io.github.cursodsousa.sbootexpsecurity.domain.repository.GrupoRepository;
import io.github.cursodsousa.sbootexpsecurity.domain.repository.UsuarioGrupoRepository;
import io.github.cursodsousa.sbootexpsecurity.domain.repository.UsuarioRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class UsuarioService {
    private final UsuarioRepository repository;
    private final GrupoRepository grupoRepository;
    private final UsuarioGrupoRepository usuarioGrupoRepository;
    private final PasswordEncoder passwordEncoder;

    @Transactional
    public UsuarioResponseDTO registrar(RegistrarUsuarioDTO dto) {
        if (!dto.getSenha().equals(dto.getConfirmacaoSenha())) {
            throw new SenhaInvalidaException("Senha e confirmação de senha não coincidem");
        }

        if (!dto.isAceiteTermos()) {
            throw new IllegalArgumentException("Você deve aceitar os termos e condições");
        }

        Usuario usuario = new Usuario();
        usuario.setNome(dto.getNome());
        usuario.setLogin(dto.getEmail());
        usuario.setEmail(dto.getEmail());
        usuario.setSenha(passwordEncoder.encode(dto.getSenha()));

        Grupo grupoPadrao = grupoRepository.findByNome("USUARIO")
                .orElseThrow(() -> new RuntimeException("Grupo padrão não encontrado"));

        UsuarioGrupo usuarioGrupo = new UsuarioGrupo(usuario, grupoPadrao);
        usuario.getGrupos().add(usuarioGrupo);

        repository.save(usuario);

        // Using the all-args constructor generated by Lombok
        return new UsuarioResponseDTO(usuario.getId(), usuario.getNome(), usuario.getLogin());
    }

    public Usuario obterUsuarioComPermissoes(String login){
        Optional<Usuario> usuarioOptional = repository.findByLogin(login);
        if(usuarioOptional.isEmpty()){
            return null;
        }

        Usuario usuario = usuarioOptional.get();
        List<String> permissoes = usuarioGrupoRepository.findPermissoesByUsuario(usuario);
        usuario.setPermissoes(permissoes);

        return usuario;
    }
}
